#!/bin/perl -w
# -*- Perl -*-

# Query Plan To Log
# use as such: with an input to psql -a <<EOF
#--<comment>
#
#--</comment>
#
#--<query runid=foobar>
#explain analyze select * from i15d1e2s0 skyline of d1 min, d2 min;
#--</query>
#
#--<query runid=bar>
#explain analyze select * from i15d1e2s0;
#--</query>
#EOF
# pipe this into qp2log

use strict;

my $line;
my $prefix;
my $i;
my $runid = "1";
my $query = "";

my $incomment = 0;
my $inquery = 0;

my %nodenamet = ("Skyline" => "skyline",
		 "Elim Filter" => "elimfilter",
		 "Elimination Filter" => "elimfilter");

LOOP2: {
    $line = <>;
    last if (!defined($line));

    if ($line =~ m/^--<comment>/) {
	$incomment = 1;
	print "#", $line;
	redo LOOP2;
    }

    if ($line =~ m/^--<\/comment>/) {
	$incomment = 0;
	print "#", $line;
	redo LOOP2;
    }

    if ($line =~ m/^--<query runid=([^>]+)>/) {
	$runid = $1;
	$inquery = 1;
	$query = "";
	print "#", $line;
	redo LOOP2;
    }

    if ($line =~ m/^--<\/query>/) {
	$inquery = 0;
	process_query($query);
	print "#", $line;
	redo LOOP2;
    }

    if ($inquery) {
	$query = $query . $line;
	redo LOOP2;
    }

    print "#", $line;
}

sub nodename {
    my $name = shift;
    my $value = $nodenamet{$name};
    return $value if (defined($value));
    return $name;
}

# TODO: check $result

sub plog {
  my $name = shift;
  my $value = shift;

  print "\"$runid\",\"$name\",\"$value\"\n";
}

sub plog_cost {
  my $name = shift;
  my $value = shift;

  my ($start, $total) = split(/\.\./, $value);

  plog($name, $value);
  plog($name . ".start", $start);
  plog($name . ".total", $total);
}

sub print_comment {
    print "#", join("\n#", split(/\n/, shift));
}

sub process_query {

    my $res = shift;

LOOP2: {
    last LOOP2 if ($res =~ m/\G^\s*QUERY PLAN/gmc);
    if ($res =~ m/\G^(.*)$/gmc) {
#	print "!", $1, "\n";
	redo LOOP2;
    }
    redo LOOP2 if ($res =~ m/\G[\n\r]/gmc);
}

LOOP:
{
    redo LOOP if ($res =~ m/\G->/gmc);
    redo LOOP if ($res =~ m/\G\s+/mgc);
    redo LOOP if ($res =~ m/\G^\(\d+\s+rows\)\s*$/gmc);
    redo LOOP if ($res =~ m/\G[\n\r]/gmc);
    redo LOOP if ($res =~ m/\G^--+/gmc);
 
    if ($res =~ m/\G(Skyline|Elim Filter) Method: ([^ ]+)\s*( distinct)?\s+([0-9]+) dim/mgc) {
	$prefix = nodename($1);
	plog("$prefix.method", $2);
	plog("$prefix.distinct", defined($3) ? "1" : "0");
	plog("$prefix.dim", $4);
	redo LOOP;
    }

    if ($res =~ m/\G(Skyline|Elim Filter) Attr:\s*([^\r\n]+)/mgc) {
	$prefix = nodename($1);
	plog("$prefix.attr", $2);
	redo LOOP;
    }

#   ->  Function Scan on rds15d  (cost=0.00..260.00 rows=1000 width=124) (actual time=760.596..802.940 rows=100000 loops=1)
    if ($res =~ m/\GFunction Scan on ([^ ]+)\s*\(cost=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+width=([0-9]+)\)\s+\(actual time=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+loops=([0-9]+)\)/mgc) {
	plog("funcscan.on", $1);
	plog("funcscan.width", $4);
	plog_cost("funcscan.cost", $5);
	plog("funcscan.rows", $6);
	redo LOOP;
    }

    if ($res =~ m/\G(Skyline|Elim Filter) Stats: passes=(\d+)(\s+rows=(\d+(, \d+)*))?/mgc) {
	$prefix = nodename($1);
	plog("$prefix.passes", $2);
	plog("$prefix.passes.rows", $4) if (defined($3));
	redo LOOP;
    }

    if ($res =~ m/\G(Skyline|Elim Filter) Window:(\s+size=(\d+)k)?(\s+slots=(\d+))?(\s+policy=(\w+))?/mgc) {
	$prefix = nodename($1);
	plog("$prefix.windowsize", $3) if (defined($2));
	plog("$prefix.windowslots", $5) if (defined($4));
	plog("$prefix.windowpolicy", $7) if (defined($6));
	redo LOOP;
    }

    if ($res =~ m/\G(Skyline|Elim Filter) Cmps: tuples=(\d+) fields=(\d+)/mgc) {
	$prefix = nodename($1);
	plog("$prefix.cmps.tuples", $2);
	plog("$prefix.cmps.fields", $3);
	plog("$prefix.cmps.ratio", $3 / $2);
	redo LOOP;
    }

    if ($res =~ m/\GSeq Scan on ([^ ]+)\s*\(cost=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+width=([0-9]+)\)\s+\(actual time=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+loops=([0-9]+)\)/mgc) {
	plog("seqscan.table", $1);
	plog_cost("seqscan.cost", $5);
	plog("seqscan.rows", $6);
	redo LOOP;
    }

    if ($res =~ m/\GSort\s+\(cost=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+width=([0-9]+)\)\s+\(actual time=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+loops=([0-9]+)\)/mgc) {
	plog_cost("sort.cost", $4);
	redo LOOP;
    }

    if ($res =~ m/\GSort Method:\s*([^\n\r]+)/mgc) {
	plog("sort.method", $1);
	redo LOOP;
    }

    if ($res =~ m/\GIndex Scan using ([^ ]+) on ([^ ]+)\s*\(cost=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+width=([0-9]+)\)\s+\(actual time=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+loops=([0-9]+)\)/mgc) {
	plog("idxscan.idx", $1);
	plog("idxscan.table", $2);
	plog_cost("idxscan.cost", $6);
	plog("idxscan.rows", $7);
	redo LOOP;
    }

    # keep this below all specific regex for a node
    if ($res =~ m/\G([^([:cntrl:]]*?)\s*\(cost=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+width=([0-9]+)\)\s+\(actual time=([0-9.]+\.\.[0-9.]+)\s+rows=([0-9]+)\s+loops=([0-9]+)\)/mgc) {
	$prefix = nodename($1);
	plog_cost("$prefix.est.cost", $2);
	plog("$prefix.est.rows", $3);
	plog("$prefix.width", $4);
	plog_cost("$prefix.cost", $5);
	plog("$prefix.rows", $6);
	plog("$prefix.loops", $7);
	redo LOOP;
    }

	if ($res =~ m/\GTotal runtime: ([0-9.]+) ms/mgc) {
	    plog("total", $1);
	    redo LOOP;
	}
    }

    if ($res =~ m/\G(.+)/mgc) {
	print "#<unmatched>\n";
	print_comment($1);
	print "#</unmatched>\n";
    }

    print "#<queryplan>\n";
    print_comment($res);
    print "#</queryplan>\n";
}
